x=reshape2::melt(x,by="id")
x2=strsplit(x$id,"_")
x2=unlist(lapply(x2,function(x)paste(x[2:length(x)],collapse = "_")))
x2=paste0(x2,"_",as.character(x$variable))
x2=gsub("independent","real",x2)
# x2=gsub("perm1","real",x2)
# x2=gsub("perm2","real",x2)
# x2=gsub("perm3","real",x2)
# x2=gsub("perm4","real",x2)
# x2=gsub("perm5","real",x2)
x$status=x2
data=data[data$statusUpdated %in% x$status,]
x=x[x$status %in% data$statusUpdated,]
x=x[,c("status","value")]
colnames(x)[2]="weightROC"
data=merge(data,x,by.x='statusUpdated',by.y="status")
rm(x)
#tmp=as.data.frame(table(data$status[data$estimated>1]))
#tmp=strsplit(as.character(tmp$Var1),"_")
#tmp=unlist(lapply(tmp,function(x) x[length(x)]))
data=data[which(data$estimated>=0 & data$estimated<=1),]
data$id=paste0(data$statusUpdated,"_",data$sampleName)
data=list(data=data)
data$average=aggregate(estimated~id,data=data$data,FUN=mean)
data3=data$data[,c("id","sampleName","real","statusUpdated","weightROC")]
data3=data3[!duplicated(data3$id),]
data3=merge(data$average,data3,by="id")
data$average=data3
rm(data3)
#ref_data=melt(dataMain$data$weightsROC)
#ref_data$status=paste0(ref_data[,1],"_",ref_data[,2])
#ref_data=ref_data[,c(4,3)]
#colnames(ref_data)=c("statusUpdated","ref_weightROC")
#ref_data=ref_data[ref_data$ref_weightROC>median(ref_data$ref_weightROC),]
#ref_data$statusUpdated=gsub("real_","",as.character(ref_data$statusUpdated))
#tmp=merge(data$average,ref_data,by="statusUpdated")
#tmp=tmp[!duplicated(tmp$statusUpdated),]
data$average$modWeightROC=data$average$weightROC-0.7
data$average$modWeightROC[which(data$average$modWeightROC<0)]=0
if(make_composite){
print(paste0(sum(data$average$statusUpdated %in% overlapped_model), " subjects used to make composite model"))
data$average$modWeightROC[!which(data$average$statusUpdated %in% overlapped_model)]=0
}
data$average$weightedEstimate=data$average$estimated*(data$average$modWeightROC)^inputROCPower
data3=data$average
data3$dx=paste0(data3$statusUpdated,"_dx",data3$real)
tmp=data3[,c("dx","real")]
tmp=tmp[!duplicated(tmp$dx),]
data3med=aggregate(weightedEstimate~dx,data=data3,median)
data$overallSubjectMean=merge(data3med,tmp,by="dx")
rm(tmp,data3med,data3)
status=data$overallSubjectMean$dx
status=strsplit(status,"_")
status=unlist(lapply(status,function(x) paste(x[1:(length(x)-1)],collapse = "_")))
data$overallSubjectMean$status=status
rm(status)
tmp=dcast(data = data$average,formula = statusUpdated~sampleName,fun.aggregate = sum,value.var = "weightedEstimate")
df=data.frame(sampleName=colnames(tmp),isSel=1,stringsAsFactors = F)
df=df[!duplicated(df$sampleName),]
df=merge(df,data.frame(sampleName=data$average$sampleName,real=data$average$real,stringsAsFactors = F),by="sampleName")
df=df[!duplicated(df$sampleName),]
df=df[match(colnames(tmp)[-1],df$sampleName),]
labelsVector=df$real
labcol=rep("black",length(labelsVector))
colramp = colorRampPalette(c("orange","yellow","black","purple","purple"))(15)
scale="none"
main=""
xx=as.matrix(dist(t(tmp[,-1])))
xxx=cor(xx)
labcol[labelsVector==0]=colorset[1]
labcol[labelsVector==1]=colorset[2]
pdf(file=paste0(inputPath,"heatmap.pdf"))
hm=heatmap.2(as.matrix(dist(t(tmp[,-1]))),col=colramp,RowSideColors = labcol,hclustfun=function(d) stats::hclust(d, method="ward.D2"),distfun=function(x) as.dist(1-cor(t(x))), ColSideColors = labcol, margins = c(5,10),scale=scale,main=main,trace="none",density.info=c("none"))
#eval(hm$call)
dev.off()
tmp2=data$average[,c("sampleName","real")]
tmp2=tmp2[!duplicated(tmp2$sampleName),]
data$concensus=apply(tmp[,-1],2,sum)
data$concensus=data.frame(sampleName=names(data$concensus),weightedEstimate=data$concensus,stringsAsFactors = F)
data$concensus=merge(data$concensus,tmp2,by="sampleName")
data$concensus$weightedEstimate=data$concensus$weightedEstimate - min(data$concensus$weightedEstimate)
data$concensus$weightedEstimate=data$concensus$weightedEstimate/max(data$concensus$weightedEstimate)
print(table(data$concensus$real,data$concensus$weightedEstimate>quantile(data$concensus$weightedEstimate,0.9)))
print(table(data$concensus$real,data$concensus$weightedEstimate>quantile(data$concensus$weightedEstimate,0.8)))
print(table(data$concensus$real,data$concensus$weightedEstimate>quantile(data$concensus$weightedEstimate,0.75)))
print(table(data$concensus$real,data$concensus$weightedEstimate>quantile(data$concensus$weightedEstimate,0.7)))
print(.myClassificationEvaluationFn(data$concensus$weightedEstimate,data$concensus$real))
data$weightsROC=weightsROC
#   dataSubjectId=data$concensus
#   if(wCompleteDS){
#     load("~/Documents/archive/dropbox_shared_tiziano/WG6/WG6_HT12_Complete.rda")
#   } else {
#     load("~/Documents/archive/dropbox_shared_tiziano/WG6/WG6_HT12_missingSomeSamples.rda")
#   }
#
# dataSubjectId=merge(dataSubjectId,data.frame(subjectId=dataQuantile$subjectId,sampleName=colnames(dataQuantile),age=dataQuantile$age,diagnosis_binary=dataQuantile$diagnosis_binary),by='sampleName')
#
# load("~/Documents/archive/UCSD_data/myData/LWdata.rda")
# LWdata$final_ADOS_CoSoTot[LWdata$DxJ_Count==1]=LWdata$ados_CoSoTot_1[LWdata$DxJ_Count==1]
# LWdata$final_ADOS_CoSoRRTot[LWdata$DxJ_Count==1]=LWdata$ados_CoSoTotRRTot_1[LWdata$DxJ_Count==1]
#
# LWdata$final_ADOS_CoSoTot[is.na(LWdata$final_ADOS_CoSoTot)]=LWdata$ados_CoSoTot_1[is.na(LWdata$final_ADOS_CoSoTot)]
#
# LWdata$final_ADOS_CoSoRRTot[is.na(LWdata$final_ADOS_CoSoRRTot)]=LWdata$ados_CoSoTotRRTot_1[is.na(LWdata$final_ADOS_CoSoRRTot)]
#
# LWdata$final_mullen_ELC[is.na(LWdata$final_mullen_ELC)]=LWdata$mullen_ELC_Std_1[is.na(LWdata$final_mullen_ELC)]
#
# LWdata$final_mullen_ELT[is.na(LWdata$final_mullen_ELT)]=LWdata$mullen_ELT_1[is.na(LWdata$final_mullen_ELT)]
#
# LWdata$final_mullen_RLT[is.na(LWdata$final_mullen_RLT)]=LWdata$mullen_RLT_1[is.na(LWdata$final_mullen_RLT)]
#
# LWdata$final_mullen_FMT[is.na(LWdata$final_mullen_FMT)]=LWdata$mullen_FMT_1[is.na(LWdata$final_mullen_FMT)]
#
# LWdata$final_mullen_VRT[is.na(LWdata$final_mullen_VRT)]=LWdata$mullen_VRT_1[is.na(LWdata$final_mullen_VRT)]
#
# LWdata$final_vine_AdapBehav_DomStd[is.na(LWdata$final_vine_AdapBehav_DomStd)]=LWdata$vine_AdapBehav_DomStd_1[is.na(LWdata$final_vine_AdapBehav_DomStd)]
#
# dataSubjectId=merge(dataSubjectId,LWdata,by.x = "subjectId",by.y='subjectid')
#
# if(nrow(data$concensus)!=nrow(dataSubjectId)){
#   print("error")
# }
# data$concensus=dataSubjectId
data$PR_values=PRs
xROC=as.data.frame(which(ROCs>0.8,arr.ind = T))
xPR=as.data.frame(which(PRs>0.8,arr.ind = T))
xROC=paste0(row.names(ROCs)[xROC$row],"-",colnames(ROCs)[xROC$col])
xPR=paste0(row.names(PRs)[xPR$row],"-",colnames(PRs)[xPR$col])
return(list(data=data,heatmap=hm))
}
dataTandM=.myDataArrangerFn(inputPath="/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_test_main_added/",inputROCthr=0.7,inputROCPower=2,colorset=c("black","green"))#,wCompleteDS=T)
ggplot(dataTandM$data$concensus,aes(factor(real),weightedEstimate))+geom_boxplot(outlier.shape = NA)+theme_bw()+geom_jitter(aes(fill=factor(real)),width = 0.4,shape=21)+ggtitle("Test data")+theme(legend.position = "none",axis.text = element_text(color="black"))+xlab("DX")+ylab("Sample score")+geom_hline(yintercept=0.7)
View(dataTandM$data$concensus)
View(dataTandM$data$concensus)
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_result_all.rda")
library(ggplot2)
library(reshape2)
library(gplots)
library(WGCNA)
library(colorRamps)
dataTandM$data$concensus$group='test'
dataTandM$data$concensus$group[ which(dataTandM$data$concensus$sampleName %in% dataMain$data$concensus$sampleName)]='main'
ggplot(dataTandM$data$concensus,aes(factor(real),weightedEstimate), hue=group)+geom_boxplot(outlier.shape = NA)+theme_bw()+geom_jitter(aes(fill=factor(real)),width = 0.4,shape=21)+ggtitle("Test data")+theme(legend.position = "none",axis.text = element_text(color="black"))+xlab("DX")+ylab("Sample score")+geom_hline(yintercept=0.7)
ggplot(dataTandM$data$concensus,aes(factor(real),weightedEstimate, fill=group), )+geom_boxplot(outlier.shape = NA)+theme_bw()+geom_jitter(aes(fill=factor(real)),width = 0.4,shape=21)+ggtitle("Test data")+theme(legend.position = "none",axis.text = element_text(color="black"))+xlab("DX")+ylab("Sample score")+geom_hline(yintercept=0.7)
ggplot(dataTandM$data$concensus,aes(fill=factor(real),y=weightedEstimate, x=group), )+geom_boxplot(outlier.shape = NA)+theme_bw()+geom_jitter(aes(fill=factor(real)),width = 0.4,shape=21)+ggtitle("Test data")+theme(legend.position = "none",axis.text = element_text(color="black"))+xlab("DX")+ylab("Sample score")+geom_hline(yintercept=0.7)
ggplot(dataTandM$data$concensus,aes(fill=factor(real),y=weightedEstimate, x=group), )+geom_boxplot(outlier.shape = NA)+theme_bw()+geom_jitter(aes(x=group),width = 0.4,shape=21)+ggtitle("Test data")+theme(legend.position = "none",axis.text = element_text(color="black"))+xlab("DX")+ylab("Sample score")+geom_hline(yintercept=0.7)
53520/240
53520/65
4209360/240
258240/1076
107130/25801
View(dataMain)
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
View(data)
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]]
testLabels=data[["testLabels"]]
middleFns=middleFns
posteriorFns=posteriorFns
classificationMethodsList=classificationMethodsList
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
initializerFns=initializerFns
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
expMat <- cbind(exprs(testInputExpData), exprs(testInputExpData_asd))
colnames(expMat) = colname_s
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
colnames(expMat) = rownames(phenoData_)
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
View(inputExpData)
labels=replace(labels, labels=='proband','ASD')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_LD/out1/data.rda")
View(data)
View(data)
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
labels=replace(labels, labels=='proband','TD')
middleFns=middleFns
posteriorFns=posteriorFns
classificationMethodsList=classificationMethodsList
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
labels=replace(labels, labels=='proband','ASD')
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
initializerFns=initializerFns
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
expMat <- cbind(exprs(testInputExpData), exprs(testInputExpData_asd))
colnames(expMat) = rownames(phenoData_)
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
# Making ASD+LD
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
labels=replace(labels, labels=='proband','TD')
middleFns=middleFns
posteriorFns=posteriorFns
classificationMethodsList=classificationMethodsList
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','TD')
middleFns=middleFns
posteriorFns=posteriorFns
classificationMethodsList=classificationMethodsList
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
labels=replace(labels, labels=='proband','ASD')
View(data)
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_LD/out1/data.rda")
View(data)
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_LD/out1/data.rda")
# Making ASD+LD
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','TD')
middleFns=middleFns
posteriorFns=posteriorFns
classificationMethodsList=classificationMethodsList
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_LD/out1/data.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
initializerFns=initializerFns
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
load('/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda')
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, inputExpData, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores, labels)
# Making ASD+LD
rm(list=ls())
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, inputExpData, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores, labels)
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','TD')
middleFns=middleFns
posteriorFns=posteriorFns
classificationMethodsList=classificationMethodsList
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
expMat <- cbind(exprs(testInputExpData), exprs(testInputExpData_asd))
colnames(expMat) = rownames(phenoData_)
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
save(inputExpData,labels,testInputExpData,testLabels,middleFns,initializerFns,posteriorFns,classificationMethodsList,expClassName,
file="/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores, labels)
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','TD')
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
expMat <- cbind(exprs(testInputExpData), exprs(testInputExpData_asd))
colnames(expMat) = rownames(phenoData_)
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
### do the initialization for main+test
setwd('/Volumes/Work/Vahid_work/classification_newcode/autism_classifier/2_mainCode/')
source('pipelines.R')
require(Biobase,quietly = T)
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
save(inputExpData,labels,testInputExpData,testLabels,middleFns,initializerFns,posteriorFns,classificationMethodsList,expClassName,
file="/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
### do the initialization for main+test
setwd('/Volumes/Work/Vahid_work/classification_newcode/autism_classifier/2_mainCode/')
source('pipelines.R')
require(Biobase,quietly = T)
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
View(testInputExpData)
output.directory='/Volumes/Work/Vahid_work/classification_newcode_data/ld_runner/'
if(!file.exists(output.directory)){
dir.create(output.directory)
} else {
unlink(output.directory, recursive = T, force = T)
dir.create(output.directory)
}
trainingInput=inputExpData
trainingLabels=labels
testInput=testInputExpData
results=.myInitializer(trainingInput,labels=trainingLabels,testInputData=testInput,testLabels=testLabels,method=initializerFns,prevMethod="")
counter=1
outputfilesList=""
for(j in 1:length(results)){
dir.create(paste0(output.directory,"out",counter))
data=results[[j]]
save(data,middleFns,posteriorFns,classificationMethodsList,expClassName,file=paste0(output.directory,"out",counter,"/data.rda"))
outputfilesList=c(outputfilesList,paste0(output.directory,"out",counter,"/"))
counter=counter+1
}
results=.myInitializer(trainingInput,labels=trainingLabels,testInputData=testInput,testLabels=testLabels,method=initializerFns,prevMethod="")
print("features data would be in expressionSet format")
res=list();
for(i in 1:length(method)){
tmpRes=.myInitializerSwitch(data,labels=labels,testInputData = testInputData,testLabels=testLabels,expClassName = expClassName,method = method[[i]])
tmpRes[[1]]$method=paste0(prevMethod,"_",tmpRes[[1]]$method)
if(i==1)
res=tmpRes
else
res=c(res,tmpRes)
}
method=initializerFns
for(i in 1:length(method)){
tmpRes=.myInitializerSwitch(data,labels=labels,testInputData = testInputData,testLabels=testLabels,expClassName = expClassName,method = method[[i]])
tmpRes[[1]]$method=paste0(prevMethod,"_",tmpRes[[1]]$method)
if(i==1)
res=tmpRes
else
res=c(res,tmpRes)
}
res=list();
for(i in 1:length(method)){
tmpRes=.myInitializerSwitch(data,labels=labels,testInputData = testInputData,testLabels=testLabels,expClassName = expClassName,method = method[[i]])
tmpRes[[1]]$method=paste0(prevMethod,"_",tmpRes[[1]]$method)
if(i==1)
res=tmpRes
else
res=c(res,tmpRes)
}
testInputData=testInput
for(i in 1:length(method)){
tmpRes=.myInitializerSwitch(data,labels=labels,testInputData = testInputData,testLabels=testLabels,expClassName = expClassName,method = method[[i]])
tmpRes[[1]]$method=paste0(prevMethod,"_",tmpRes[[1]]$method)
if(i==1)
res=tmpRes
else
res=c(res,tmpRes)
}
prevMethod=""
for(i in 1:length(method)){
tmpRes=.myInitializerSwitch(data,labels=labels,testInputData = testInputData,testLabels=testLabels,expClassName = expClassName,method = method[[i]])
tmpRes[[1]]$method=paste0(prevMethod,"_",tmpRes[[1]]$method)
if(i==1)
res=tmpRes
else
res=c(res,tmpRes)
}
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
labels=replace(labels, labels=='proband','ASD')
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
# Making ASD+LD
rm(list=ls())
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores, labels)
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','TD')
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
labels=replace(labels, labels=='proband','ASD')
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
labels
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores, labels)
labels=replace(labels, labels=='proband','ASD')
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores)
labels=replace(labels, labels=='proband','ASD')
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','TD')
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','ASD')
expClassName='ASD'
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
expMat <- cbind(exprs(testInputExpData), exprs(testInputExpData_asd))
colnames(expMat) = rownames(phenoData_)
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
save(inputExpData,labels,testInputExpData,testLabels,middleFns,initializerFns,posteriorFns,classificationMethodsList,expClassName,
file="/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
### do the initialization for main+test
setwd('/Volumes/Work/Vahid_work/classification_newcode/autism_classifier/2_mainCode/')
source('pipelines.R')
require(Biobase,quietly = T)
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
output.directory='/Volumes/Work/Vahid_work/classification_newcode_data/ld_runner/'
if(!file.exists(output.directory)){
dir.create(output.directory)
} else {
unlink(output.directory, recursive = T, force = T)
dir.create(output.directory)
}
trainingInput=inputExpData
trainingLabels=labels
testInput=testInputExpData
method=initializerFns
testLabels=testLabels
testInputData=testInput
results=.myInitializer(trainingInput,labels=trainingLabels,testInputData=testInput,testLabels=testLabels,method=initializerFns,prevMethod="")
counter=1
outputfilesList=""
for(j in 1:length(results)){
dir.create(paste0(output.directory,"out",counter))
data=results[[j]]
save(data,middleFns,posteriorFns,classificationMethodsList,expClassName,file=paste0(output.directory,"out",counter,"/data.rda"))
outputfilesList=c(outputfilesList,paste0(output.directory,"out",counter,"/"))
counter=counter+1
}
outputfilesList=outputfilesList[-1]
write.table(outputfilesList,file=paste0(output.directory,"dataList.txt"),row.names = F,col.names = F)
# Making ASD+LD
rm(list=ls())
load("/Volumes/Work/Vahid_work/classification_newcode_data/inputDataJabba_main.rda")
rm(classificationMethodsList, posteriorFns, middleFns, expClassName, runReal, npermTest, nfold, ncores)
labels=replace(labels, labels=='proband','ASD')
load("/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda")
# test_set=list()
testInputExpData=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=data[["testLabels"]][which(data[["testLabels"]]=='proband')]
testLabels=replace(testLabels, testLabels=='proband','ASD')
# load('/Volumes/Work/Vahid_work/classification_newcode_data/final_testDataset_HT12_test/out1/data.rda')
load("/Volumes/Work/Vahid_work/classification_newcode_data/data_LD.rda")
testInputExpData_asd=data[["testInputData"]][, which(data[["testLabels"]]=='proband')]
testLabels=c(testLabels, data[["testLabels"]][which(data[["testLabels"]]=='proband')])
testLabels=replace(testLabels, testLabels=='proband','TD')
expClassName='ASD'
annotation <- fData(testInputExpData)
metaData <- data.frame(labelDescription=colnames(annotation))
probeinfo <- new("AnnotatedDataFrame", data=data.frame(annotation), varMetadata=metaData)
phenoData_ <- rbind(pData(testInputExpData), pData(testInputExpData_asd))
phenoData_ <- new("AnnotatedDataFrame", data=data.frame(phenoData_), varMetadata=data.frame(labelDescription=colnames(phenoData_)) )
expMat <- cbind(exprs(testInputExpData), exprs(testInputExpData_asd))
colnames(expMat) = rownames(phenoData_)
testInputExpData=new("ExpressionSet", exprs=expMat, featureData = probeinfo, phenoData=phenoData_)
save(inputExpData,labels,testInputExpData,testLabels,middleFns,initializerFns,posteriorFns,classificationMethodsList,expClassName,
file="/Volumes/Work/Vahid_work/classification_newcode_data/inputExpData_main_with_ASD_and_LD.rda")
install.packages("ggpubr")
install.packages("factoextra")
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra)
source("WGCNAandGeneFilterationMethods.R")
source("pipelines.R")
source("ClassificationModule.R")
8/107
3570*12
