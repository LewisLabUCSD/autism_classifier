anno1=anno1[!duplicated(anno1$BloodDrawId),]
inputRins2=merge(inputRins,anno1[,c("BloodDrawId",'subjectId')],by.x='Sample.Code',by.y='BloodDrawId')
if(nrow(inputRins)!=nrow(inputRins2)){
print("error!")
}
inputRins=inputRins2
indx=regexpr("[0-9]+",inputRins$Well)
strCode=substr(inputRins$Well,0,indx-1)
strDig=substr(inputRins$Well,indx,nchar(inputRins$Sample.Code))
strDig[nchar(strDig)==1]=paste0("0",strDig[nchar(strDig)==1])
inputRins$name=paste0(gsub("-","_",inputRins$Sample.Code),"_",inputRins$subjectId,toupper(strCode),strDig)
rm(strCode,strDig,indx)
name2=gsub("-","_",colnames(inputData))
name2=strsplit(name2,"_")
name2=unlist(lapply(name2,function(x)paste(x[-length(x)],collapse = "_")))
inputRins=inputRins[match(name2,inputRins$name),]
if(!all(inputRins$name==name2)){
print("error")
}
if(nrow(inputRins)!=ncol(inputData)){
print("error")
}
return(inputRins)
}
rins=read.table("~/OneDrive - UC San Diego/vahid_mac/Documents/data/ExpressionData/RNAseq/newBatch/B2_server/RINs_B2.txt",sep="\t",stringsAsFactors = F,header=T,comment.char = "",quote ="")
tst=resArranged[[1]]
#rins=.matchRinsB1(rins,tst)
rins=.matchRinsB2(inputRins = rins,inputData = tst)
dim(rins)
for(i in 1:length(resArranged)){
resArranged[[i]]$rin=rins$RINe
resArranged[[i]]$RNAconcCurrentTS=rins$Conc..ng.uL.
resArranged[[i]]$rRNA28Svs18S=rins$X28S.18S
resArranged[[i]]$RNAconcPre=rins$Reported.concentration
resArranged[[i]]$commentIGM=rins$Comments
}
print("Comments by IGM")
comIGM=data.frame(table(colnames(resArranged[[1]])[!is.na(resArranged[[1]]$commentIGM)],resArranged[[1]]$commentIGM[!is.na(resArranged[[1]]$commentIGM)]))
comIGM=comIGM[,c(1,2)]
comIGM$interGenicRate=resArranged[[1]]$`QC_Intergenic Rate`[match(comIGM$Var1,colnames(resArranged[[1]]))]
colnames(comIGM)[c(1,2)]=c("Sample","Comment")
colnames(comIGM)[3]="calculated intergenic mapping rate"
print(comIGM)
rm(rinMapper,rins,tst,i)
print("*********************************")
print("RIN summary:")
print(summary(resArranged[[1]]$rin))
boxplot(resArranged[[1]]$rin~resArranged[[1]]$recentDxJ_dxCode,ylab="RIN")
print("*********************************")
print("RNA concentrations have increased (!) over time:")
x=lm(resArranged[[1]]$RNAconcCurrent~resArranged[[1]]$RNAconcPre)
plot(resArranged[[1]]$RNAconcPre,resArranged[[1]]$RNAconcCurrent,ylab="Currnet RNA conc",xlab="Prev. RNA conc.")
abline(x,col="purple")
print("RNA concentrations have increased (!) over time:")
plot(resArranged[[1]]$RNAconcPre,resArranged[[1]]$RNAconcCurrent-resArranged[[1]]$RNAconcPre,ylab="Diff. Currnet vs. Prev.",xlab="Prev. RNA conc.")
resArranged[[1]]$RNAconcCurrent
resArranged[[1]]$RNAconcPre
plot(resArranged[[1]]$RNAconcPre,resArranged[[1]]$RNAconcCurrent-as.numeric(resArranged[[1]]$RNAconcPre),ylab="Diff. Currnet vs. Prev.",xlab="Prev. RNA conc.")
abline(h = 0,col="purple")
x=(resArranged[[1]]$RNAconcCurrent-as.numeric(resArranged[[1]]$RNAconcPre))/as.numeric(resArranged[[1]]$RNAconcPre)
x=x[!is.na(x)]
plot(density(x),xlab="(Current - Prev.)/Prev.",main="Diff Current vs. Prev.")
abline(v = 0,col="purple")
slData=resArranged$HTseqGeneUnion
res=.myRNAseqNormVoomfn(slData,model.matrix(~0+recentDxJ_dxCode+sex,slData),inputCovariates=NULL,quantileNormalize=F,withQualityWeights=T)
source("Rprofile")
.prepare()
.myPlotHierarchical2
library(Biobase)
load("~/Downloads/arrangedData.rda")
dim(dataOriginal)
sum(is.na(dataOriginal$CoSoTot))
load("~/Downloads/arrangedData.rda")
dataM=dataOriginal[,dataOriginal$sex=="M"]
model = model.matrix(~0+diagnosis_binary + as.factor(batch),data=pData(dataM))
fit = lmFit(dataM,design=model)
library(limma)
model = model.matrix(~0+diagnosis_binary + as.factor(batch),data=pData(dataM))
colnames(model)=c("LD","PND","proband","TD","batch2")
colnames(model)=c("proband","TD","batch2")
fitLimmaMproband = lmFit(dataM,design=model)
contrast1=makeContrasts(proband-TD,LD-TD,PND-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1],coef="proband - TD");
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
head(asdProband)
dataDE=asdProband
FDRall=rorw.names(dataDE)[dataDE$adj.P.Val<0.05]
FDRup=rorw.names(dataDE)[dataDE$adj.P.Val<0.05 & dataDE$logFC>0]
FDRdown=rorw.names(dataDE)[dataDE$adj.P.Val<0.05 & dataDE$logFC>0]
FDRall=row.names(dataDE)[dataDE$adj.P.Val<0.05]
FDRup=row.names(dataDE)[dataDE$adj.P.Val<0.05 & dataDE$logFC>0]
FDRdown=row.names(dataDE)[dataDE$adj.P.Val<0.05 & dataDE$logFC>0]
head(FDRall)
head(FDRdown)
dataDE=dataDE[order(dataDE$P.Value,decreasing = F),]
source("~/classificationModuleJabba/classificationCode/3- mainCode/WGCNAandGeneFilterationMethods.R")
source("~/classificationModuleJabba/classificationCode/3- mainCode/pipelines.R")
source("~/classificationModuleJabba/classificationCode/3- mainCode/ClassificationModule.R")
setwd("~/classificationModuleJabba/classificationCode/3- mainCode")
source("~/classificationModuleJabba/classificationCode/3- mainCode/WGCNAandGeneFilterationMethods.R")
source("~/classificationModuleJabba/classificationCode/3- mainCode/pipelines.R")
source("~/classificationModuleJabba/classificationCode/3- mainCode/ClassificationModule.R")
args="~/OneDrive - UC San Diego/Vahid/OneDrive - UC San Diego/classificationPaper/newData/server_results/classificationDiscoverySet/out1/data.rda"
args="~/OneDrive - UC San Diego/Vahid/OneDrive - UC San Diego/classificationPaper/newData/server_results/classificationDiscoverySet/out1/"
rm(list=ls())
args="~/OneDrive - UC San Diego/Vahid/OneDrive - UC San Diego/classificationPaper/newData/server_results/classificationDiscoverySet/out1/"
path=gsub("\"", "", args[1])
itrCounter=0
itrCounter=itrCounter+1
load(paste0(path,'data.rda'))
middleFns
middleFns=list(pipeline6)
middleFns=list('pipeline6')
middleFns
resultsMiddle=.myMiddleFn(list(data),methodList=middleFns,ncores=1,expClassName=expClassName)
expClassName
inputData=list(data)
methodList=middleFns
ncores=1
expClassName
ncores=min(ncores,length(inputData))
x=1:length(inputData)
length(inputData)
res=lapply(x,.myMiddleFnDetailed,inputData,methodList,expClassName=expClassName)
res
methodsList=methodList
methodsList
expClassName
j=1
labels=inputData[[j]]$labels
dataP=inputData[[j]]$features
testInputData=inputData[[j]]$testInputData
testLabels=inputData[[j]]$testLabels
method=inputData[[j]]$method
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
i=1
methodsList
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
.myDEanalysisFn=function(inputExpSet,labels){
print("input is supposed to be log transformed data (approach developed on microarray data)")
require(limma,quietly=T)
df=data.frame(label=labels,stringsAsFactors = F)
model = model.matrix(~label,data=df)
fitTmp = lmFit(inputExpSet,design=model)
fitTmp=eBayes(fitTmp,robust = T)
fitTmp=toptable(fitTmp,number=dim(fitTmp)[1]);
return(list(resDE=fitTmp))
}
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
inputData=dataP
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
dim(dataDE)
head(dataDE)
class(dataDE)
dataDE=unlist(dataDE)
dim(dataDE)
class(dataDE)
head(dataDE)
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
dim(dataDE[[1]])
dataDE=dataDE[[1]]
resFinal=list()
if(sum(dataDE$adj.P.Val<0.05,na.rm = T)>0){
FDRall=row.names(dataDE)[dataDE$adj.P.Val<0.05]
resFDRall=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(FDRall)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(FDRall)),],testLabels=testLabels,method="FDRall")
resFinal=c(resFinal,list(resFDRall))
}
if(sum(dataDE$adj.P.Val<0.05 & dataDE$logFC>0,na.rm = T)>0){
FDRup=row.names(dataDE)[dataDE$adj.P.Val<0.05 & dataDE$logFC>0]
resFDRup=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(FDRup)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(FDRup)),],testLabels=testLabels,method="FDRup")
resFinal=c(resFinal,list(resFDRup))
}
if(sum(dataDE$adj.P.Val<0.05 & dataDE$logFC<0,na.rm = T)>0){
FDRdown=row.names(dataDE)[dataDE$adj.P.Val<0.05 & dataDE$logFC<0]
resFDRdown=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(FDRdown)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(FDRdown)),],testLabels=testLabels,method="FDRdown")
resFinal=c(resFinal,list(resFDRdown))
}
if(sum(dataDE$adj.P.Val<0.01,na.rm = T)>0){
Pvalall=row.names(dataDE)[dataDE$adj.P.Val<0.01]
resPvalall=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(Pvalall)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(Pvalall)),],testLabels=testLabels,method="Pvalall")
resFinal=c(resFinal,list(resPvalall))
}
if(sum(dataDE$adj.P.Val<0.01 & dataDE$logFC>0,na.rm = T)>0){
Pvalup=row.names(dataDE)[dataDE$adj.P.Val<0.01 & dataDE$logFC>0]
resPvalup=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(Pvalup)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(Pvalup)),],testLabels=testLabels,method="Pvalup")
resFinal=c(resFinal,list(resPvalup))
}
if(sum(dataDE$adj.P.Val<0.01 & dataDE$logFC<0,na.rm=T)>0){
Pvaldown=row.names(dataDE)[dataDE$adj.P.Val<0.01 & dataDE$logFC<0]
resPvaldown=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(Pvaldown)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(Pvaldown)),],testLabels=testLabels,method="Pvaldown")
resFinal=c(resFinal,list(resPvaldown))
}
dataDE=dataDE[order(dataDE$P.Value,decreasing = F),]
if(length(row.names(dataDE))>100){
top100all=row.names(dataDE)[1:100]
res100all=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top100all)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top100all)),],testLabels=testLabels,method="top100all")
resFinal=c(resFinal,list(res100all))
}
if(length(row.names(dataDE))>500){
top500all=row.names(dataDE)[1:500]
resTop500all=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top500all)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top500all)),],testLabels=testLabels,method="top500all")
resFinal=c(resFinal,list(resTop500all))
}
if(length(row.names(dataDE))>1000){
top1000all=row.names(dataDE)[1:1000]
resTop1000all=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top1000all)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top1000all)),],testLabels=testLabels,method="top1000all")
resFinal=c(resFinal,list(resTop1000all))
}
if(length(row.names(dataDE[dataDE$logFC>0,]))>100){
top100up=row.names(dataDE[dataDE$logFC>0,])[1:100]
resTop100up=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top100up)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top100up)),],testLabels=testLabels,method="top100up")
resFinal=c(resFinal,list(resTop100up))
}
if(length(row.names(dataDE[dataDE$logFC>0,]))>500){
top500up=row.names(dataDE[dataDE$logFC>0,])[1:500]
resTop500up=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top500up)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top500up)),],testLabels=testLabels,method="top500up")
resFinal=c(resFinal,list(resTop500up))
}
if(length(row.names(dataDE[dataDE$logFC>0,]))>1000){
top1000up=row.names(dataDE[dataDE$logFC>0,])[1:1000]
resTop1000up=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top1000up)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top1000up)),],testLabels=testLabels,method="top1000up")
resFinal=c(resFinal,list(resTop1000up))
}
if(length(row.names(dataDE[dataDE$logFC<0,]))>100){
top100down=row.names(dataDE[dataDE$logFC<0,])[1:100]
resTop100down=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top100down)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top100down)),],testLabels=testLabels,method="top100down")
resFinal=c(resFinal,list(resTop100down))
}
if(length(row.names(dataDE[dataDE$logFC<0,]))>500){
top500down=row.names(dataDE[dataDE$logFC<0,])[1:500]
resTop500down=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top500down)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top500down)),],testLabels=testLabels,method="top500down")
resFinal=c(resFinal,list(resTop500down))
}
if(length(row.names(dataDE[dataDE$logFC<0,]))>1000){
top1000down=row.names(dataDE[dataDE$logFC<0,])[1:1000]
resTop1000down=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(top1000down)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(top1000down)),],testLabels=testLabels,method="top1000down")
resFinal=c(resFinal,list(resTop1000down))
}
dim(resFinal)
length(resFinal)
head(resFinal[[1]]$labels)
dim(resFinal[[1]]$labels)
dim(resFinal[[1]]$features)
dim(resFinal[[1]]$testInputData)
sum(dataDE$adj.P.Val<0.05,na.rm = T)>0
sum(dataDE$adj.P.Val<0.05,na.rm = T)
FDRall=row.names(dataDE)[dataDE$adj.P.Val<0.05]
dim(FDRall)
length(FDRall)
sum(dataDE$adj.P.Val<0.05)
head(dataDE)
table(labels)
inputExpSet=inputData
labels
df=data.frame(label=labels,stringsAsFactors = F)
head(df)
str(df)
model = model.matrix(~label,data=df)
head(model)
fitTmp = lmFit(inputExpSet,design=model)
fitTmp=eBayes(fitTmp,robust = T)
fitTmp=toptable(fitTmp,number=dim(fitTmp)[1]);
head(fitTmp)
dim(inputExpSet)
exprs(inputExpSet)[1:4,1:4]
model = model.matrix(~diagnosis_binary,data=inputExpSet)
head(model)
fitTmp = lmFit(inputExpSet,design=model)
fitTmp=eBayes(fitTmp,robust = T)
fitTmp=toptable(fitTmp,number=dim(fitTmp)[1]);
head(fitTmp)
model = model.matrix(~0+diagnosis_binary,data=pData(inputExpSet))
head(model)
colnames(model)=c("proband","TD")
fitLimmaMproband = lmFit(inputExpSet,design=model)
contrast1=makeContrasts(proband-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1],coef="proband - TD");
head(asdProband)
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
head(asdProband)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
head(model)
.myDEanalysisFn=function(inputExpSet,labels){
print("input is supposed to be log transformed data (approach developed on microarray data)")
require(limma,quietly=T)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
colnames(model)=c("proband","TD","batch")
fitLimmaMproband = lmFit(inputExpSet,design=model)
contrast1=makeContrasts(proband-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
return(list(resDE=fitTmp))
}
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
dataDE=dataDE[[1]]
resFinal=list()
head(dataDE)
.myDEanalysisFn=function(inputExpSet,labels){
print("input is supposed to be log transformed data (approach developed on microarray data)")
require(limma,quietly=T)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
colnames(model)=c("proband","TD","batch")
fitLimmaMproband = lmFit(inputExpSet,design=model)
contrast1=makeContrasts(proband-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
return(list(resDE=fitTmp))
}
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
dataDE=dataDE[[1]]
head(dataDE)
inputExpSet=inputData
.myDEanalysisFn=function(inputExpSet,labels){
print("input is supposed to be log transformed data (approach developed on microarray data)")
require(limma,quietly=T)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
colnames(model)=c("proband","TD","batch")
fitLimmaMproband = lmFit(inputExpSet,design=model)
contrast1=makeContrasts(proband-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=toptable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
return(list(resDE=asdProband))
}
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
dataDE=dataDE[[1]]
head(dataDE)
sum(dataDE$adj.P.Val<0.05,na.rm = T)
resFinal=list()
if(sum(dataDE$adj.P.Val<0.05,na.rm = T)>0){
FDRall=row.names(dataDE)[dataDE$adj.P.Val<0.05]
resFDRall=list(labels=labels,features=inputData[which(row.names(inputData) %in% as.character(FDRall)),],testInputData=testInputData[which(row.names(testInputData) %in% as.character(FDRall)),],testLabels=testLabels,method="FDRall")
resFinal=c(resFinal,list(resFDRall))
}
dim(resFinal[[1]]$features)
dim(resFinal[[1]]$testInputData)
rm(list=ls())
args="~/OneDrive - UC San Diego/Vahid/OneDrive - UC San Diego/classificationPaper/newData/server_results/classificationDiscoverySet/out1/"
require(Biobase,quietly = T)
path=gsub("\"", "", args[1])
itrCounter=0
itrCounter=itrCounter+1
load(paste0(path,'data.rda'))
middleFns=list("pipeline6")
resultsMiddle=.myMiddleFn(list(data),methodList=middleFns,ncores=1,expClassName=expClassName)
.myDEanalysisFn=function(inputExpSet,labels){
print("input is supposed to be log transformed data (approach developed on microarray data)")
require(limma,quietly=T)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
colnames(model)=c("proband","TD","batch")
fitLimmaMproband = lmFit(inputExpSet,design=model)
contrast1=makeContrasts(proband-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=topTable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
return(list(resDE=asdProband))
}
inputData=list(data)
methodList=middleFns
ncores=1
ncores=min(ncores,length(inputData))
res=lapply(x,.myMiddleFnDetailed,inputData,methodList,expClassName=expClassName)
result=res[[1]]
x=1
res=lapply(x,.myMiddleFnDetailed,inputData,methodList,expClassName=expClassName)
result=res[[1]]
methodsList=methodList
j=1
labels=inputData[[j]]$labels
dataP=inputData[[j]]$features
testInputData=inputData[[j]]$testInputData
testLabels=inputData[[j]]$testLabels
method=inputData[[j]]$method
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
i=1
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
source("WGCNAandGeneFilterationMethods.R")
source("pipelines.R")
source("ClassificationModule.R")
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
dim(tmpRes)
length(tmpRes)
.myMiddleFnDetailed=function(x,inputData,methodsList,expClassName){
result=list()
for(j in x){
labels=inputData[[j]]$labels
dataP=inputData[[j]]$features
testInputData=inputData[[j]]$testInputData
testLabels=inputData[[j]]$testLabels
method=inputData[[j]]$method
#pipeline3=.pipeline3(dataP,labels=labels,testInputData=testInputData,testLabels=testLabels)
for(i in 1:length(methodsList)){
tmpRes=list()
try({
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
},silent = T)
print(paste0(length(tmpRes)," results were collected from ",method,"_",methodsList[[i]]," route"))
if(length(tmpRes)>0){
for(counter in 1:length(tmpRes)){
tmpMethod=paste0(method,"_",tmpRes[[counter]][["method"]])
tmpList=list(list(labels=labels,features=tmpRes[[counter]]$features,testInputData=tmpRes[[counter]]$testInputData,testLabels=tmpRes[[counter]]$testLabels,method=tmpMethod))
if(length(result)==0){
result=tmpList
} else {
result=c(result,tmpList)
}
}
}
}
}
return(result)
}
res=lapply(x,.myMiddleFnDetailed,inputData,methodList,expClassName=expClassName)
setwd("~/classificationModuleJabba/classificationCode/5- main feature selection/")
source("WGCNAandGeneFilterationMethods.R")
source("pipelines.R")
source("ClassificationModule.R")
rm(list=ls())
args="~/Desktop/data_test.rda"
require(Biobase,quietly = T)
#arg1: directory address for each fold
path=gsub("\"", "", args[1])
itrCounter=0
itrCounter=itrCounter+1
load(paste0(path,'data.rda'))
load(args)
middleFns
middleFns=middleFns[c(1,6)]
middleFns
resultsMiddle=.myMiddleFn(list(data),methodList=middleFns,ncores=1,expClassName=expClassName)
dim(data$features)
inputData=list(data)
methodList=middleFns
ncores=1
ncores=min(ncores,length(inputData))
x=1:length(inputData)
res=lapply(x,.myMiddleFnDetailed,inputData,methodList,expClassName=expClassName)
methodsList=methodList
methodList
methodsList=methodList[2]
methodsList
j=1
labels=inputData[[j]]$labels
dataP=inputData[[j]]$features
testInputData=inputData[[j]]$testInputData
testLabels=inputData[[j]]$testLabels
method=inputData[[j]]$method
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
i=1
tmpRes=.myMiddleFnSwitch(inputData=dataP,labels=labels,testInputData = testInputData,testLabels=testLabels,method=methodsList[[i]],expClassName=expClassName)
inputData=dataP
labels=labels
testInputData = testInputData
testLabels=testLabels
method=methodsList[[i]]
expClassName=expClassName
table(labels)
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
dataDE=dataDE[[1]]
dim(inputData)
length(labels)
dim(testInputData)
length(testLabels)
dataDE=.myGeneFilteration(inputData,labels,testInputData,testLabels,expClassName=expClassName,method="DE")
inputExpSet=inputData
method="DE"
outputsize=NULL
print("input is supposed to be log transformed data (approach developed on microarray data)")
require(limma,quietly=T)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
colnames(model)=c("proband","TD","batch")
head(model)
sum(model[,2])
inputExpSet$diagnosis_binary=as.character(inputExpSet$diagnosis_binary)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
head(model)
table(inputExpSet$batch)
inputExpSet$diagnosis_binary=as.character(inputExpSet$diagnosis_binary)
inputExpSet$batch=as.character(inputExpSet$batch)
model = model.matrix(~0+diagnosis_binary+batch,data=pData(inputExpSet))
head(model)
colnames(model)=c("proband","TD","batch")
fitLimmaMproband = lmFit(inputExpSet,design=model)
contrast1=makeContrasts(proband-TD,levels=model)
fitLimmaMproband=contrasts.fit(fitLimmaMproband,contrasts=contrast1)
fitLimmaMproband=eBayes(fitLimmaMproband,robust = T)
asdProband=topTable(fitLimmaMproband,number=dim(fitLimmaMproband)[1]);
head(asdProband)
head(row.names(asdProband))
setwd("~/classificationModuleJabba/classificationCode/5- main feature selection/")
source("WGCNAandGeneFilterationMethods.R")
source("pipelines.R")
source("ClassificationModule.R")
rm(list=ls())
args="~/Desktop/data_test.rda"
require(Biobase,quietly = T)
path=gsub("\"", "", args[1])
itrCounter=0
itrCounter=itrCounter+1
load(args)
middleFns=middleFns[c(1,6)]
resultsMiddle=.myMiddleFn(list(data),methodList=middleFns,ncores=1,expClassName=expClassName)
resultsPosterior=.myPosteriorFn(resultsMiddle,methodList=posteriorFns,ncores=1,expClassName=expClassName)
warnings()
dim(resultsPosterior)
length(resultsPosterior)
